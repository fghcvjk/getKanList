* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）
+ 号代表前面的字符必须至少出现一次（1次或多次）
? 问号代表前面的字符最多只可以出现一次（0次、或1次）
^ 	匹配输入字符串的开始位置
$ 	匹配输入字符串的结尾位置
. 	匹配除换行符 \n 之外的任何单字符
x|y 	匹配 x 或 y
{n} 	n 是一个非负整数。匹配确定的 n 次
{n,} 	n 是一个非负整数。至少匹配n 次
{n,m} 	m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次
*、+和?限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配
\b 	匹配一个字边界，即字与空格间的位置
\B 	非字边界匹配，与\b正好完全相反（字与字间的位置）
( ) 	标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 \n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数
(?:pattern) 	匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用
(?=pattern) 	正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用（(?:pattern)用来匹配，这个只是作为匹配条件但是不匹配）
(?!pattern) 	负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用（与(?=pattern)相反）
(?<=pattern)	非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反
(?<!pattern)	非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反
[xyz]	字符集合。匹配所包含的任意一个字符
[^xyz]	负值字符集合。匹配未包含的任意字符
[a-z] 	字符范围。匹配指定范围内的任意字符
正则表达式后面的全局标记 g 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。
正则表达式后面的全局标记 i 标记指定不区分大小写。

